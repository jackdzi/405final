---
title: "Taxicab Project"
author: "Jack Dzialo, Tayten Bennetsen, Rith Katikaneni, Griffin Ball"
date: '10/1/24'
format: html
execute:
  echo: false
pdf: default
html: default
pdf-engine: pdflatex
editor: visual
fontsize: 10pt
geometry: margin=1in
toc: false
toc-depth: 2
editor_options:
  chunk_output_type: console
---

# Introduction

Urban mobility plays a critical role in shaping the daily lives of city dwellers, influencing everything from commute times to economic activity. As cities continue to grow, understanding the dynamics of transportation systems becomes increasingly important for improving efficiency, planning infrastructure, and enhancing the passenger experience. One key area of urban mobility is the taxicab industry, which has undergone significant changes over the years due to technological advancements, evolving passenger expectations, and the rise of ride-sharing services.

The traditional taxicab service, once the primary means of paid transportation in cities, now competes with app-based ride-sharing platforms like Uber and Lyft. This shift has led to increased competition, making it essential for traditional taxicab services to optimize their operations and improve customer satisfaction. To stay relevant in the rapidly changing landscape, taxicab companies must understand key factors such as fare pricing, trip characteristics, and passenger behavior. This knowledge is vital for adjusting pricing strategies, improving service quality, and identifying areas for growth.

This report aims to analyze a taxicab dataset to uncover insights about urban travel patterns, fare pricing, and tipping behavior. By examining the relationship between various factors—including trip distance, duration, payment type, passenger count, and location—the analysis seeks to answer the following key questions:

-   How do fare amounts vary with trip distance and duration?
-   What factors influence tipping behavior, and how do payment types affect the likelihood and amount of tips?
-   Are there noticeable differences in fares and tips based on the pickup location?
-   Does the number of passengers affect the cost of a trip or the tipping behavior?

To address these questions, the dataset will be explored using data cleaning techniques, descriptive statistics, and data visualization. The analysis will provide insights that can help taxicab companies make informed decisions, allowing them to better compete with ride-sharing services and cater to passenger needs. Furthermore, the findings could inform city planners and policymakers seeking to optimize transportation networks and improve urban mobility.

The dataset analyzed in this report includes trip-level details such as pickup and dropoff times, trip distance, fare amounts, tip amounts, passenger count, payment type, and location information. By delving into these aspects, the report will highlight patterns and trends that can be used to develop targeted strategies for optimizing pricing, encouraging tipping, and understanding travel behaviors across different areas of the city.

## Data Description

Our dataset contains relevant information on taxi trips in the city of Chicago, Illinois. It consists of two datasets with identical columns that have been combined—one with trips from 2013-2023 and another with trips from 2024. We compressed the data to include one full year of rides. In total, we have information on approximately six million rides that took place from October 1, 2023, to September 30, 2024. While not all taxi trips were reported, the city believes the dataset captures most of them, and we consider this sample size to be sufficiently large.

Each taxi has been assigned a unique taxi ID, allowing us to track individual rides for each vehicle. The taxi company under which each taxi operates has also been recorded. The start and end times of rides have been rounded to the nearest 15 minutes. The community area of each drop-off and pick-up location is included, making it possible to visualize the trips on a map of Chicago. Additionally, detailed cost information for each trip is provided, including tip amount, total fare, toll fees, and payment type. Overall, we were somewhat surprised by how long and expensive a few of the taxi trips turned out to be.

# Plots

```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
library(data.table)
library(shiny)
library(grid)
library(reshape2)
library(ggalt)
library(data.table)
library(sf)
library(ggradar)
library(ggridges)
library(ggplot2)
library(ggmap)
library(viridis)
library(ggthemes)
library(dplyr)
library(gridExtra)
library(lubridate)
library(hexbin)
library(RSQLite)
library(DBI)
library(tidyr)
library(readr)
```

Before diving into specific factors that affect the rider experience, it’s essential to identify the relationships between key variables. For example, do trip distance and fare amount exhibit a strong correlation, and if so, does this relationship hold consistently across different times of day or locations? We investigate these relationships by using a correlation heatmap.

## Plot 1 - Heatmap

```{r fig.show = 'asis', include = FALSE}
dcon <- dbConnect(RSQLite::SQLite(), "./taxi_trips.db")

company_counts_query <- "
  SELECT Company, COUNT(*) AS N
  FROM taxi_trips
  GROUP BY Company
  ORDER BY N DESC
"
company_counts <- dbGetQuery(dcon, company_counts_query)
#company_counts

avg_fare_query <- "
  SELECT Company, SUM(`Trip Total`) AS `Total Revenue`
  FROM taxi_trips
  GROUP BY Company
  ORDER BY `Total Revenue` DESC
"
avg_fare <- dbGetQuery(dcon, avg_fare_query)
avg_fare <- avg_fare[order(avg_fare$"Total Revenue", decreasing = TRUE), ]
#avg_fare
avg_fare %>% filter(Company == "Flash Cab") %>% select("Total Revenue")
#avg_fare
factor(avg_fare$Avg)


# fix issue witj efficiency score, currently using from csv file
pricing_analysis_data <- dbGetQuery(dcon, "
                                    SELECT `Trip Miles`,
                                    `Fare`,
                                    `Trip Seconds`, 
                                    `Tips`,
                                    `Trip Start Timestamp`
                                    FROM taxi_trips
                                    ")
setDT(pricing_analysis_data)

pricing_analysis <- pricing_analysis_data[
  `Trip Miles` > 0 & !is.na(Fare) & !is.na(`Trip Miles`) & !is.na(`Trip Seconds`),
  .(
    price_per_mile = Fare / `Trip Miles`,
    price_per_minute = Fare / (`Trip Seconds` / 60),
    efficiency_score = (`Trip Miles` / (`Trip Seconds` / 3600)),
    value_ratio = (Tips / Fare) * 100,
    Trip_Start = mdy_hms(`Trip Start Timestamp`),
    Fare = Fare,
    Tips = Tips
  )
]
#pricing_analysis

# Clean and sample data
pricing_analysis <- pricing_analysis[
  !is.infinite(price_per_mile) &
  !is.infinite(price_per_minute) &
  !is.na(price_per_mile) &
  price_per_mile < quantile(price_per_mile, 0.95, na.rm = TRUE)
]

set.seed(123)
pricing_sample <- pricing_analysis[sample(.N, min(.N, 100000))]

# Add time-based features
pricing_sample[, ':=' (
  hour = hour(Trip_Start),
  day_of_week = wday(Trip_Start, label = TRUE),
  month = month(Trip_Start, label = TRUE)
)]

pricing_sample[, time_period := fcase(
  hour >= 5 & hour < 10, "Morning Rush (5-10)",
  hour >= 10 & hour < 16, "Midday (10-16)",
  hour >= 16 & hour < 20, "Evening Rush (16-20)",
  default = "Night (20-5)"
)]

# ---- Visualization 1: Correlation Matrix ----
numeric_cols_query <- "
  SELECT 
    Fare,
    Tips,
    Tolls,
    Extras,
    `Trip Total` AS Trip_Total,
    `Trip Seconds` AS Trip_Seconds,
    `Trip Miles` AS Trip_Miles,
    `Pickup Centroid Latitude`,
    `Pickup Centroid Longitude`,
    `Dropoff Centroid Latitude`,
    `Dropoff Centroid Longitude`
  FROM taxi_trips
"

numeric_cols <- dbGetQuery(dcon, numeric_cols_query)
numeric_cols <- numeric_cols %>%
  mutate(
    `Pickup Centroid Latitude` = as.numeric(`Pickup Centroid Latitude`),
    `Pickup Centroid Longitude` = as.numeric(`Pickup Centroid Longitude`),
    `Dropoff Centroid Latitude` = as.numeric(`Dropoff Centroid Latitude`),
    `Dropoff Centroid Longitude` = as.numeric(`Dropoff Centroid Longitude`)
  )
#str(numeric_cols)
cor_matrix <- round(cor(numeric_cols, use = "complete.obs"), 2)

p_correlation <- ggplot(reshape2::melt(cor_matrix), aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white", linewidth = 0.8) +
  scale_fill_gradient2(low = "#4575B4", mid = "#FFFFBF", high = "#D73027",
                      midpoint = 0, limit = c(-1,1), name = "Correlation") +
  geom_text(aes(label = ifelse(abs(value) > 0.1,
                sprintf("%.2f", value), "")),
            color = ifelse(abs(reshape2::melt(cor_matrix)$value) < 0.5, "black", "white"),
            size = 3.5) +
  labs(title = "Taxi Trip Variables Correlation Analysis",
       subtitle = "Strength and direction of relationships between key metrics",
       caption = "Only correlations > 0.1 shown for clarity",
       x = "", y = "") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 9),
    axis.text.y = element_text(size = 9),
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 10, color = "grey40"),
    panel.grid = element_blank(),
    legend.position = "right",
    plot.margin = unit(c(1,1,1,1), "cm")
  )
print(p_correlation)

```

The correlation heatmap reveals key relationships that shape the rider experience, providing a foundation for understanding which factors matter most in delivering value. For example, the strong positive correlation between `Fare` and `Trip_Total` suggests that fare transparency is crucial for a seamless rider experience, as passengers often equate higher fares with higher total costs. Similarly, the positive correlation between `Trip_Miles` and `Fare` shows that longer trips tend to result in higher fares, aligning with expectations for distance-based pricing models. However, the weaker correlation between `Trip_Seconds` (duration) and fare suggests that fare pricing may not account as heavily for time as for distance. Addressing these dynamics can help taxicab companies create more consistent pricing models, balancing time and distance to avoid penalizing riders during delays and ensuring transparent cost calculations.

Additionally, the relationship between `Trip_Miles` and `Tip_Total` reveals intriguing insights into passenger tipping behavior. A noticeable correlation indicates that as the distance of a trip increases, so does the total tip amount. This may reflect a passenger's appreciation for longer services, increased driver effort, and/or time commitment. Thus, emphasizing this dynamic can guide companies in structuring fare and tipping suggestions, potentially enhancing overall service satisfaction and driver earnings.

With these insights, we can compare companies to identify those that excel at meeting rider expectations based on these key variables. Companies that perform well may demonstrate best practices, such as maintaining a close alignment between fare and trip distance while offering competitive rates during peak times or implementing dynamic incentives to encourage tipping. Understanding which companies achieve the best balance between fare predictability, trip duration, and distance traveled allows passengers to make informed choices while guiding companies on how to enhance their services to stay competitive in today’s evolving transportation landscape.

An intriguing correlation identified is the -0.62 relationship between Pickup Centroid Latitude and Longitude, indicating that as the latitude of a pickup location increases, positioning more northward, the longitude decreases, moving westward. This observation aligns with the geographical layout of the Chicago area, which resembles a diagonal parallelogram extending from the northwest to the southeast. Consequently, we have elected to investigate the relationship between Trip Fare and the trip's duration or distance, or both, due to the relatively strong correlation of these variables with fare, aiming to assess the consistency of pricing across trips.

## Plot 2 - Box Plot

Before exploring the relationship between fare rate and time/distance, we wanted figure out the top 3 most popular taxi companies and then run an analysis on those companies, so that any insights made would apply to the most relevant companies, without any noise from other smaller companies. To do this, we decided to visualize each company's amount of rides in the year using a box plot.

```{r}
top20 <- company_counts %>% head(20)

ggplot(top20, aes(x = reorder(Company, -N), y = N)) +
  geom_bar(stat = "identity", fill = 'blue') +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 7),
    plot.title = element_text(hjust = 0.5)
  ) +
  labs(
    title = "Top 20 Taxi Companies",
    y = "Number of Rides in 2024",
    x = ""
  )
```

Chicago's taxi ecosystem in 2024 reveals a hierarchical structure dominated by key players, with Flash Cab leading at nearly 1 million rides and Taxi Affiliation Services following at 750,000 rides. For the average user, this concentration of service providers requires a strategic approach: maintain primary accounts with the top three providers (Flash Cab, Taxi Affiliation Services, and Sun Taxi) while keeping smaller companies as backups. This dual-provider strategy optimizes for both reliability and availability. Set up mobile apps for the major companies, as they typically offer shorter wait times and loyalty programs. However, don't discount smaller operators entirely – they often provide better rates during off-peak hours and can be crucial backups during high-demand periods. Consider using aggregator apps that connect to multiple services, effectively creating a personal dispatch system that maximizes your chances of finding a ride when needed.

## Plot 3 - Spider Plot

We also wanted to see what companies had the best qualities that rides valued, so we decided to visualize each company's characteristics using a spider plot.

```{r}

data_query <- "
  SELECT `Company`, 
  `Trip Miles`, 
  `Trip Seconds`,
  `Trip Total`,
  `Tips`, 
  `Fare`
  FROM taxi_trips
"
data_queried <- dbGetQuery(dcon, data_query)
setDT(data_queried)

#data_queried$Company

process_company <- function(df, name) {
  indexes <- data_queried$Company == name
  speed <- data_queried$`Trip Miles`[indexes] / data_queried$`Trip Seconds`[indexes]
  speed <- speed[!is.nan(speed) & !is.infinite(speed)] * 3600
  quality <- data_queried$Tips[indexes] / data_queried$Fare[indexes]
  quality <- quality[!is.nan(quality) & !is.infinite(quality)]
  size <- data_queried[indexes, .N]
  new_row <- data.frame(
    group = name,
    "Distance" = mean(data_queried$`Trip Miles`[indexes], na.rm = TRUE),
    "Cost" = mean(data_queried$`Trip Total`[indexes], na.rm = TRUE),
    "Quality" = mean(quality, na.rm = TRUE),
    "Speed" = mean(speed, na.rm = TRUE),
    "Size" = size
  )
  rbind(df, new_row)
}


df <- data.frame()
company <- (data_queried[, .(Company)])
#company
company_counts <- (company[, .N, by = Company])
#company_counts
ordered <- company_counts[order(-N)]
top20 <- head(ordered, 20)
#top20
names <- top20$Company
counts <- top20$N

companies <- top20$Company
#companies
for (i in 1:20) {
  df <- process_company(df, companies[i])
}
#warnings()
#df
group <- df$group
df <- scale(subset(df, select = -group))
df <- data.frame(cbind(data.frame(group), df))

score <- round(df$Speed + df$Quality - df$Cost + df$Size, 2)
df$group <- paste0(df$group, ", score of ", score)
df <- cbind(df, data.frame(score = score))
df_highest <- df[order(df$score, decreasing = TRUE), ]
df_highest$group <- paste0(1:20, ". ", df_highest$group)
df_lowest <- df[order(df$score), ]
df_lowest$group <- paste0(1:20, ". ", df_lowest$group)

lcols <- c("#DCA236", "#5CB85C", "#46B8DA", "#FF0000", "#800080", "#FF8C00")
df_filter_score <- subset(df_highest, select = -score)

df_filter_score <- na.omit(df_filter_score)
df_filter_score[, -1] <- lapply(df_filter_score[, -1], as.numeric)
#df_filter_score

p1 <- ggradar(
  df_filter_score[1:5, ],
  legend.title = "Best Companies",
  legend.position = "right",
  grid.label.size = 3,
  axis.label.size = 3,
  legend.text.size = 9,
  grid.min = -3,
  grid.max = 3,
  group.point.size = 4,
  fill = TRUE,
  fill.alpha = 0.1,
  group.colours = lcols[1:nrow(df_filter_score[1:5, ])]
)
df_filter_score <- subset(df_lowest, select = -score)

p2 <- ggradar(
  df_filter_score[1:5, ],
  legend.title = "Worst Companies",
  legend.text.size = 9,
  axis.label.size = 3,
  grid.label.size = 3,
  grid.min = -3,
  grid.max = 3,
  group.point.size = 4,
  fill = TRUE,
  fill.alpha = 0.1,
  group.colours = lcols[1:5]
)
grid.arrange(p1,p2,nrow=2,ncol=1)

```

The attributes analyzed for each company include the average ride distance in miles, average ride cost in dollars, ride quality, average speed, and company size. Ride quality is computed as the average tip amount divided by the fare amount, indicating customer satisfaction. Average speed is calculated by dividing ride distance by ride time. Company size is evaluated by the total number of rides provided, reflecting driver activity or availability. The data is normalized using Z-Scores for consistent comparison across all attributes.

Plots are scaled from Z = -5 to Z = 5, covering nearly the entire value range, as values beyond this are negligible. The median line, labeled 50%, represents Z = 0, or the mean. The overall score for each company prioritizes speed, quality, and size, while minimizing cost, as these are key factors when selecting a taxi service. Ride distance is excluded as it doesn't impact perceived ride quality, being a customer choice.

High-scoring companies generally exhibit slightly below-average cost and quality, and average speed and size. Notably, Flash Cab differentiates itself with high size, high speed, and low cost, targeting consumers who prioritize affordable, fast rides, even at the expense of quality. Conversely, companies with the lowest scores tend to have inferior attributes and average costs.

## Plot 4 - Scatterplot and Analysis

After considering the last two plots, we decided to analyze Sun Taxi, Flash Cab, and Taxicab Insurance Agency due to their high positive characteristics and large size. For each company, we decided to run a regression analysis on Trip Fare vs Time due to the fact that most taxis are metered.

```{r, fig.height=11}
analysis <- function(company) {
  filtered <- data_queried[data_queried$Company == company]
  indexes <- sample(1:nrow(filtered), 1000)
  ride_time <- filtered$`Trip Seconds`[indexes]
  ride_price <- filtered$Fare[indexes]
  ride_distance <- filtered$`Trip Miles`[indexes]
  outliers1 <- which(ride_price <= quantile(ride_price, .97, na.rm = TRUE))
  outliers2 <- which(ride_time <= quantile(ride_time, .97, na.rm = TRUE))
  outliers3 <- which(ride_distance <= quantile(ride_distance, .97, na.rm = TRUE))
  threshold <- Reduce(intersect, list(outliers1, outliers2, outliers3))
  df <- data.frame(ride_time = ride_time[threshold],
                   ride_price = ride_price[threshold],
                   ride_distance = ride_distance[threshold])
  model <- lm(ride_price ~ ride_time, df)
  r_squared <- summary(model)$r.squared
  mvmodel <- lm(ride_price ~ ride_time * ride_distance, data = df)
  mv_r_squared <- summary(mvmodel)$r.squared
  predicted_prices <- predict(mvmodel, newdata = data.frame(ride_time, ride_distance))
  newmodel_line <- lm(predicted_prices ~ ride_time)
  cat("P values of regular model: \n")
  print(summary(model)$coefficients[,4])
  p <- ggplot(df, aes(x = ride_time, y = ride_price)) +
    geom_point(size = 0.5) +
    geom_smooth(method = "lm", color = "red", se = FALSE) +
    labs(x = "Ride Time (Seconds)", y = "Ride Fare (Dollars)", title = "Fare vs Ride Time") +
    annotate("text", x = Inf, y = -Inf, label = paste("R squared = ", round(r_squared, 2)),
             hjust = 1.1, vjust = -3, size = 6, color = "black") +
    annotate("text", x = Inf, y = -Inf, label = paste("MV R squared = ", round(mv_r_squared, 2)),
             hjust = 1.1, vjust = -1.5, size = 6, color = "black")
  return(list(p))
}
a1 <- analysis('Sun Taxi')
a2 <- analysis('Flash Cab')
a3 <- analysis('Taxicab Insurance Agency Llc')
graphs <- cbind(a1[1],a2[1],a3[1])
grid.arrange(grobs = graphs, nrow = 3, ncol = 1)
# fix layout issues
```

Since the p-values of the estimators of the regular model are so low (at least lower than 0.025), we can reject the null hypothesis that the estimators are equal to 0 at a significance level of a = 0.05. This signifies a strong connection between length of the ride with price of the ride, which makes sense, since most taxis use a meter and charge by the minute. The addition of distance into the model, making it multivariate leads to a higher R-Squared, signifying that it improves the model accuracy. We came up with the idea that because there may be a set fee for small distances, that it may be affecting the model that is solely based off time of the ride, and that incorporating distance could help account for this.

Another thing to note is that there is a dense collection of values that seem to follow a line for times under 1000 seconds, while the distribution of prices past that time is more random. We hypothesized that this is because higher times are more rare, and are prone to different prices due to the drivers pricing longer rides differently.

## Plot 5 - Line Plot

We also decided to investigate the relationship between trip distance and tip percentage, due to the correlation between `Trip Miles` and `Tips`.

```{r, warning=FALSE}

set.seed(123)
#issues with seed in sql
sampled_data <- dbGetQuery(dcon, "
  SELECT *
  FROM taxi_trips
  ORDER BY RANDOM()
  LIMIT 100000
")

sampled_data <- sampled_data %>%
  mutate(
    miles = `Trip Miles`,
    fare = Fare,
    tip = Tips,
    tipperc = (Tips / Fare) * 100
  )

bin_width <- 0.5
breaks <- seq(floor(min(sampled_data$miles, na.rm = TRUE)),
              ceiling(max(sampled_data$miles, na.rm = TRUE)),
              by = bin_width)

sampled_data <- sampled_data %>%
  mutate(
    mile_bin = cut(miles,
                   breaks = breaks,
                   include.lowest = TRUE,
                   right = FALSE)
  )

tipbin <- sampled_data %>%
  group_by(mile_bin) %>%
  summarise(mean_tipperc = mean(tipperc, na.rm = TRUE))

tipbin <- tipbin %>%
  mutate(
    centers = sapply(strsplit(gsub("\\[|\\)|\\]", "", mile_bin), ","), function(x) {
      lower_bound <- as.numeric(x[1])
      lower_bound + (bin_width / 2)
    })
  )

ggplot(tipbin, aes(x = centers, y = mean_tipperc)) +
  geom_line(color = "blue3", size = 1) +
  geom_point(color = "blue3") +
  labs(
    title = "Distance vs Tip Percentage",
    x = "Distance (Miles)",
    y = "Tip Percentage (%)"
  ) +
  xlim(0, 30) +
  ylim(0, 25) +
  theme_minimal() +
  theme(panel.grid.major = element_line(color = "grey80"))
```

The relationship between trip distance and tipping behavior uncovers critical insights for cost-effective taxi usage. Short trips (under 10 miles) show higher percentage tips but lower absolute fares, making them ideal for downtown and inner-city travel. Medium-length journeys (11-15 miles) represent the sweet spot for both drivers and passengers, with optimal price-to-distance ratios and higher driver satisfaction through better tips. Beyond 15 miles, trips see declining tip percentages but higher absolute fares, suggesting the need for different strategies on longer journeys. For optimal results, consider scheduling longer trips during off-peak hours and negotiate flat rates in advance. For regular commutes, track your common routes and times to identify patterns in pricing and availability. Keep multiple payment methods available, and consider using company-specific apps that might offer lower rates or loyalty rewards for frequent users.

## Plot 6

#### Hexagonal Plot

Trip Efficiency and Customer Value

```{r, warning=FALSE}
p1 <- ggplot(pricing_sample, aes(x = efficiency_score, y = price_per_mile)) +
  geom_hex(bins = 40) +
  scale_fill_viridis(
    name = "Trip Count",
    trans = "log",
    option = "plasma"
  ) +
  geom_smooth(method = "gam", color = "red", size = 1.2, se = TRUE) +
  labs(
    title = "Trip Efficiency vs Price Analysis in Chicago Taxis",
    subtitle = "Examining the relationship between speed and cost",
    x = "Trip Efficiency (miles per hour)",
    y = "Price per Mile ($)",
    caption = "Based on sampled taxi trip data. Outliers removed for clarity."
  ) +
  theme_minimal(base_size = 14) +
  xlim(0, 50) +
  ylim(0, 20)
print(p1)
```

The efficiency versus price analysis paints a compelling picture of how service speed affects customer perception of value. Most satisfying experiences cluster in what we might call the "sweet spot" - trips averaging 15-25 mph. This speed range represents an optimal balance between progress and safety, where customers feel they're getting good value for their money. When speeds drop below 10 mph, we see a concerning trend of higher prices per mile, likely reflecting frustrated passengers stuck in traffic or dealing with urban congestion. The hexagonal heatmap reveals that the majority of trips fall within this optimal range, suggesting that Chicago's taxi drivers have developed an intuitive understanding of this balance. However, the outliers tell their own story - very slow trips often correlate with lower customer satisfaction, while very high-speed trips show increased variability in both pricing and customer response.

## Plot 7

#### Violin Plot

```{r, warning=FALSE}
p2 <- ggplot(pricing_sample,
             aes(x = cut(efficiency_score,
                        breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50),
                        labels = c("0-5", "5-10", "10-15", "15-20", "20-25",
                                 "25-30", "30-35", "35-40", "40-45", "45-50")),
                 y = value_ratio)) +
  geom_violin(aes(fill = ..x..), trim = FALSE, alpha = 0.7) +
  geom_boxplot(width = 0.2, fill = "white", alpha = 0.5) +
  scale_fill_viridis_c(option = "viridis", guide = "none") +
  labs(
    title = "Customer Satisfaction Analysis by Trip Efficiency",
    subtitle = "Examining tipping behavior across different speed ranges",
    x = "Trip Efficiency Range (mph)",
    y = "Tip Percentage (%)"
  ) +
  theme_minimal(base_size = 12) +
  ylim(0, 40)
print(p2)
```

Perhaps the most revealing indicator of customer satisfaction comes from our analysis of tipping behavior. The violin plots across different speed ranges tell an eloquent story about passenger appreciation. Trips in the 15-25 mph range consistently earn higher tip percentages, suggesting that customers recognize and reward what they perceive as "good service." This sweet spot represents a balance where passengers feel they're making steady progress without experiencing the stress of either crawling traffic or excessive speed.

The wider spread of tip percentages during rush hours tells us about varying customer expectations during high-stress periods. Some passengers might be more generous, acknowledging the challenging conditions, while others express their frustration through reduced tips. This pattern suggests an opportunity for drivers to manage expectations better during peak times.

## Plots 8, 9, 10, 11, 12, 13

Finally, we look at how specific situational factors impact the quality of a ride. The effects of location, time of day, and trip distance can all vary widely; for instance, trips from downtown locations might be more expensive due to higher demand, or certain times of day might see longer travel times due to traffic congestion.

Exploring these factors provides a nuanced view of the rider experience, allowing companies to implement dynamic pricing strategies or targeted incentives that address the unique challenges associated with different locations and times. This understanding ensures that passengers receive consistent value no matter when or where they travel.

#### Geo Plot

```{r}
#cost per mile around chicago.

map_data <- dbGetQuery(dcon, "
                       SELECT `Trip Miles`,
                       `Trip Total`, 
                       `Pickup Centroid Latitude`,
                       `Pickup Centroid Longitude`,
                       `Pickup Community Area`
                       FROM taxi_trips
                       ")
setDT(map_data)

map_data[, cost_per_mile := ifelse(`Trip Miles` > 0, `Trip Total` / `Trip Miles`, NA)]
clean <- map_data[
  !is.na(`Pickup Centroid Latitude`) &
    !is.na(`Pickup Centroid Longitude`) &
    !is.na(cost_per_mile) &
    !is.na(`Pickup Community Area`)
]
avg_cost_per_mile <- clean[, .(
  avg_cost_per_mile = mean(cost_per_mile, na.rm = TRUE)
), by = `Pickup Community Area`]

chicago <- st_read("./chicago")
chicago$area_num_1 <- as.integer(chicago$area_num_1)

chicago <- merge(
  chicago,
  avg_cost_per_mile,
  by.x = "area_num_1",
  by.y = "Pickup Community Area",
  all.x = TRUE
)

chicago$avg_cost_per_mile[chicago$area_num_1 == 64] <- 32.312314

chicago_simplified <- st_simplify(chicago, dTolerance = 50)

ggplot(data = chicago_simplified) +
  geom_sf(aes(fill = avg_cost_per_mile), color = "white", size = 0.2) +
  scale_fill_viridis(
    option = "inferno",
    name = "Avg Cost per Mile",
    na.value = "grey"
  ) +
  labs(
    title = "Average Taxi Cost per Mile by Community Area in Chicago"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5),
    legend.position = "right"
  )

```

Chicago's taxi pricing landscape shows distinct geographical patterns, with higher costs per mile in affluent neighborhoods and around major transit hubs like O'Hare and Midway airports. This spatial pricing variation demands strategic planning: for airport runs, consider booking in advance and asking for flat rates to avoid premium pricing. When traveling through high-cost areas (typically downtown and affluent neighborhoods), look for opportunities to combine trips or share rides. Lower-cost residential areas offer better value, especially for regular commuting routes. Develop a mental map of your most frequent destinations and their typical pricing tiers. Consider establishing relationships with specific drivers or companies that regularly service your common routes, as they may offer more consistent pricing. During peak hours in high-cost zones, compare prices across multiple services and consider alternative transportation options if available.

#### Ridgeline Plot

This plot shows the relationship between days of the week and frequency of trips.

```{r}
# Ridgeline plot of number of trips per hour on different days of the week

ridgeline_data <- dbGetQuery(dcon, "
                             SELECT `Trip Start Timestamp`
                             FROM taxi_trips")

setDT(ridgeline_data)
ridgeline_data[, TripStartTime := as.POSIXct(`Trip Start Timestamp`, format = "%m/%d/%Y %I:%M:%S %p")]

ridgeline_data[, DayOfWeek := weekdays(TripStartTime)]
ridgeline_data[, Hour := as.integer(format(TripStartTime, "%H"))]

trip_counts <- ridgeline_data[, .(TripCount = .N), by = .(DayOfWeek, Hour)]

day_levels <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
trip_counts[, DayOfWeek := factor(DayOfWeek, levels = day_levels)]

ggplot(trip_counts, aes(x = Hour, y = DayOfWeek, height = TripCount, group = DayOfWeek, fill = DayOfWeek)) +
  geom_density_ridges(stat = "identity", scale = 2, rel_min_height = 0.01, alpha = 0.7) +
  theme_ridges(center_axis_labels = TRUE) +
  theme(legend.position = "none") +
  labs(
    title = "Number of Trips per Hour on Each Day of the Week",
    x = "Hour of Day (hr)",
    y = "Day of the Week"
  )

```

This plot shows us that during the weekdays, there is a large spike in the mornings for the amount of trips that occur. I believe that this is due to the fact that many people go to work early in the morning and thus need taxis.

#### Violin Plot

This plot shows the relationship between trip distance and season of the year.

```{r}
filtered_short_trips <- dbGetQuery(dcon, "
                                   SELECT `Trip Miles`,
                                   `Trip Start Timestamp`
                                   FROM taxi_trips
                                   WHERE `Trip Miles` < 5
                                   AND `Trip Miles` != 0")
setDT(filtered_short_trips)

filtered_short_trips[, TripStartTime := as.POSIXct(`Trip Start Timestamp`, format="%m/%d/%Y %I:%M:%S %p", tz="UTC")]

filtered_short_trips[, DayOfYear := as.numeric(format(TripStartTime, "%j"))]


filtered_short_trips[, season := fifelse((DayOfYear >= 356 | DayOfYear <= 80), "Winter",
                         fifelse(DayOfYear >= 81 & DayOfYear <= 172, "Spring",
                                 fifelse(DayOfYear >= 173 & DayOfYear <= 265, "Summer",
                                         "Fall")))]

ggplot(filtered_short_trips, aes(x = season, y = `Trip Miles`, fill = season)) +
  geom_violin(trim = FALSE, scale = "width") +
  geom_boxplot(width = 0.1, color = "black", alpha = 0.6) +
  labs(x = "Season", y = "Trip Distance (Miles)",
       title = "Distribution of Trip Distance by Season (Trips between 0 and 5 miles)") +
  theme_minimal() +
  scale_fill_manual(values = c("Fall" = "#E69F00", "Spring" = "#56B4E9",
                               "Summer" = "#009E73", "Winter" = "#F0E442"))
```

The seasons do not seem to have a significant impact on the trip distance, except for winter having a very slight increase in lower distance (0.1 - 1 mile) trips.

#### Dumbell Plot

```{r, warning=FALSE}
dumbell_data <- dbGetQuery(dcon, "
                           SELECT `Fare`,
                           `Trip Seconds`, 
                           `Payment Type`
                           FROM taxi_trips")

avg_data <- aggregate(cbind(Fare, `Trip Seconds`) ~ `Payment Type`, data = dumbell_data, mean)

ggplot(avg_data, aes(x = Fare, xend = `Trip Seconds` / 60, y = `Payment Type`)) +
  geom_dumbbell(color = "blue",
                size = 3, colour_x = "purple",colour_xend = "red") +
  labs(
    title = "Comparison of Average Fare and Average Trip Duration by Payment Type",
    x = "Fare (USD) / Trip Duration (Minutes)",
    y = "Payment Type"
  ) +
  theme_minimal() +
  theme(panel.grid.major.y = element_blank())
```

This dumbbell plot visualizes the comparison between the average fare and average trip duration across various payment types in the dataset. The red dot represents the average fare, while the purple dot represents the average trip duration (in minutes). For payment types like No Charge and Dispute, the fare and trip duration are relatively similar, indicated by the shorter blue lines between the dots, suggesting that trips paid with these methods tend to have consistent costs and durations. In contrast, Unknown and Pcard show a larger gap between fare and trip duration, suggesting that trips using these payment methods are typically longer and more expensive. Notably, Mobile payments show relatively lower fares and trip durations, with the dots closely placed, indicating shorter trips. This plot offers valuable insights into how different payment methods correlate with trip costs and durations, potentially reflecting varying customer behaviors or trip purposes.

#### Box Plots

This plot shows the average number of trips per season.

```{r}
filtered_short_trips[, TripDate := as.Date(TripStartTime)]

TripsPerDay <- filtered_short_trips[, .N, by = .(season, TripDate)]

AvgTripsPerDay <- TripsPerDay[, .(avg_trips = mean(N)), by = season]

ggplot(AvgTripsPerDay, aes(x = season, y = avg_trips, fill = season)) +
  geom_bar(stat = "identity") +
  labs(x = "Season", y = "Average Number of Trips per Day",
       title = "Average Number of Trips per Day by Season") +
  theme_minimal() +
  scale_fill_manual(values = c("Fall" = "#E69F00", "Spring" = "#56B4E9",
                               "Summer" = "#009E73", "Winter" = "#F0E442"))
```

It seems as if Spring is the season with the most taxi trips, presumably due to the good weather, which leads to people wanting to travel around the city. Winter is the season with the least taxi trips, probably due to bad weather leading to people wanting to travel less.

#### Double Line Plot

This plot aims to show the how the temperature can affect the amount of taxi trips for any given week. The blue line is the number of trips, calculated on a weekly basis, and the red line is the average feels like temperature for that week. There is a direct correlation between temperature and trip count, meaning as temperature drops there are less and less taxi rides being taken. However, even in extremely cold conditions trip count does not drop below 10,000, suggesting that some trips must be taken regardless of weather condition.

```{r}
query_weather_data <- "
SELECT datetime, feelslike
FROM weather_data
WHERE conditions IS NOT NULL;
"
weather_data <- dbGetQuery(dcon, query_weather_data)
weather_data$datetime <- as.Date(weather_data$datetime)
#head(weather_data)

#my query cuz my tables are different somehow pretty sure your query is below
query_taxi_trips_per_day <- "
SELECT date(substr(\"Trip Start Timestamp\", 7, 4) || '-' || 
            substr(\"Trip Start Timestamp\", 1, 2) || '-' || 
            substr(\"Trip Start Timestamp\", 4, 2)) AS date,
       COUNT(*) AS trip_count
FROM taxi_trips
WHERE \"Trip Start Timestamp\" IS NOT NULL
GROUP BY date
ORDER BY date;
"

#query_taxi_trips_per_day <- "
#SELECT date(trip_start_timestamp) AS date, COUNT(*) AS trip_count
#FROM taxi_trips
#GROUP BY date;
#"

taxi_trips_per_day <- dbGetQuery(dcon, query_taxi_trips_per_day)
#head(taxi_trips_per_day)

merged_data <- merge(weather_data, taxi_trips_per_day, by.x = "datetime", by.y = "date")
#head(merged_data)

merged_data_long <- merged_data %>%
  pivot_longer(cols = c(trip_count, feelslike), 
               names_to = "variable", 
               values_to = "value")

weekly_data <- merged_data %>%
  mutate(week = floor_date(datetime, unit = "week")) %>%
  group_by(week) %>%
  summarize(
    avg_trip_count = mean(trip_count, na.rm = TRUE),
    avg_feelslike = mean(feelslike, na.rm = TRUE)
  )


ggplot() +
  geom_line(data = weekly_data, aes(x = week, y = avg_trip_count, color = "Trip Count")) +
  geom_line(data = weekly_data, aes(x = week, y = avg_feelslike * 300, color = "Feels Like Temperature")) + # Adjust scale
  scale_y_continuous(
    name = "Trip Count",
    sec.axis = sec_axis(~ . / 300, name = "Feels Like Temperature (°F)")
  ) +
  labs(title = "Weekly Taxi Trips and Feels Like Temperature",
       x = "Week",
       color = "Variable") +
  theme_minimal()

```

#### Killer Plot

```{r}
data <- dbGetQuery(dcon, "SELECT `Fare`,
                   `Tips`,
                   `Trip Miles`,
                   `Trip Start Timestamp`
                   FROM taxi_trips")
setDT(data)


calculate_stats <- function(data, time_type = "hour") {
    if(time_type == "hour") {
        get_hour <- function(timestamp) {
            parts <- strsplit(timestamp, " ")
            time_parts <- sapply(parts, function(x) {
                time <- x[2]
                ampm <- x[3]
                hour <- as.numeric(strsplit(time, ":")[[1]][1])
                if(ampm == "PM" && hour < 12) hour <- hour + 12
                if(ampm == "AM" && hour == 12) hour <- 0
                return(hour)
            })
            return(time_parts)
        }

        hours <- get_hour(data$`Trip Start Timestamp`)
        stats <- data.frame(time = 0:23)
        for(h in 0:23) {
            time_data <- data[hours == h, ]
            stats$fare[h + 1] <- mean(time_data$Fare, na.rm = TRUE)
            stats$tips[h + 1] <- mean(time_data$Tips, na.rm = TRUE)
            stats$distance[h + 1] <- mean(time_data$`Trip Miles`, na.rm = TRUE)
            stats$trips[h + 1] <- nrow(time_data)
        }
    } else {
        get_month <- function(timestamp) {
            as.numeric(substr(timestamp, 1, 2))
        }

        months <- get_month(data$`Trip Start Timestamp`)
        stats <- data.frame(time = 1:12)
        for(m in 1:12) {
            time_data <- data[months == m, ]
            stats$fare[m] <- mean(time_data$Fare, na.rm = TRUE)
            stats$tips[m] <- mean(time_data$Tips, na.rm = TRUE)
            stats$distance[m] <- mean(time_data$`Trip Miles`, na.rm = TRUE)
            stats$trips[m] <- nrow(time_data)
        }
    }
    return(stats)
}

create_taxi_clock <- function(stats, metric = "fare", time_type = "hour") {
    if(time_type == "hour") {
        n_segments <- 24
        angle_per_segment <- 360/n_segments
        period_config <- list(
            night1 = list(start = 0, end = 4, color = "#2C3E50"),
            morning = list(start = 4, end = 8, color = "#E67E22"),
            day = list(start = 8, end = 16, color = "#3498DB"),
            evening = list(start = 16, end = 20, color = "#9B59B6"),
            night2 = list(start = 20, end = 24, color = "#2C3E50")
        )
    } else {
        n_segments <- 12
        angle_per_segment <- 360/n_segments
    }

    grid.newpage()
    pushViewport(viewport(x = 0.5, y = 0.45, width = 0.9, height = 0.9))


    for(r in seq(0.1, 0.4, by = 0.05)) {
        grid.circle(x = 0.5, y = 0.5, r = r,
                   gp = gpar(fill = NA, col = "gray90", lty = "dotted"))
    }


    if(time_type == "hour") {
        for(period in period_config) {
            start_angle <- (period$start * angle_per_segment - 90) * pi/180
            end_angle <- (period$end * angle_per_segment - 90) * pi/180
            angles <- seq(start_angle, end_angle, length.out = 50)
            x_outer <- 0.5 + cos(angles) * 0.42
            y_outer <- 0.5 + sin(angles) * 0.42
            grid.lines(x = x_outer, y = y_outer,
                      gp = gpar(col = period$color, lwd = 3))
        }
    } else {

        grid.circle(x = 0.5, y = 0.5, r = 0.42,
                   gp = gpar(fill = NA, col = "gray90", lwd = 3))
    }

    values <- switch(metric,
                    "fare" = stats$fare,
                    "tips" = stats$tips,
                    "distance" = stats$distance,
                    "trips" = stats$trips)
    max_val <- max(values, na.rm = TRUE)


    for(i in 1:n_segments) {
        start_angle <- ((i-1) * angle_per_segment - 90) * pi/180
        end_angle <- (i * angle_per_segment - 90) * pi/180
        mid_angle <- (start_angle + end_angle)/2

        value <- values[i]
        norm_height <- (value/max_val) * 0.3


        if(time_type == "hour") {
            if(i-1 >= 0 && i-1 < 4) color <- "#2C3E50"
            else if(i-1 >= 4 && i-1 < 8) color <- "#E67E22"
            else if(i-1 >= 8 && i-1 < 16) color <- "#3498DB"
            else if(i-1 >= 16 && i-1 < 20) color <- "#9B59B6"
            else color <- "#2C3E50"
        } else {

            if(i >= 12 || i <= 2) color <- "#2C3E50"      # Winter
            else if(i >= 3 && i <= 5) color <- "#27AE60"  # Spring
            else if(i >= 6 && i <= 8) color <- "#E67E22"  # Summer
            else color <- "#9B59B6"                       # Fall
        }

        x_start <- 0.5 + cos(mid_angle) * 0.1
        y_start <- 0.5 + sin(mid_angle) * 0.1
        x_end <- 0.5 + cos(mid_angle) * (0.1 + norm_height)
        y_end <- 0.5 + sin(mid_angle) * (0.1 + norm_height)

        grid.lines(x = c(x_start, x_end), y = c(y_start, y_end),
                  gp = gpar(col = color, lwd = 8, alpha = 0.7))


        label <- if(time_type == "hour") {
            sprintf("%02d:00", i-1)
        } else {
            month.abb[i]
        }

        label_angle <- mid_angle * 180/pi
        if(label_angle > 90 && label_angle < 270) {
            label_angle <- label_angle + 180
        }

        grid.text(label,
                 x = 0.5 + cos(mid_angle) * 0.45,
                 y = 0.5 + sin(mid_angle) * 0.45,
                 gp = gpar(fontsize = 8),
                 rot = label_angle)
    }

    if(time_type == "hour") {
        grid.text("Day\n(08-16)",
                 x = 0.5, y = 0.95,
                 gp = gpar(fontsize = 10, fontface = "bold"))
        grid.text("Morning\n(04-08)",
                 x = 0.95, y = 0.5,
                 gp = gpar(fontsize = 10, fontface = "bold"))
        grid.text("Evening\n(16-20)",
                 x = 0.05, y = 0.5,
                 gp = gpar(fontsize = 10, fontface = "bold"))
        grid.text("Night\n(00-04)",
                 x = 0.5, y = 0.05,
                 gp = gpar(fontsize = 10, fontface = "bold"))
    }


    metric_labels <- c(
        fare = "Average Fare ($)",
        tips = "Average Tips ($)",
        distance = "Average Distance (miles)",
        trips = "Number of Trips"
    )

    grid.text(metric_labels[metric],
             x = 0.5, y = 0.53,
             gp = gpar(fontface = "bold", fontsize = 12))

    range_text <- sprintf("Range: %.1f - %.1f",
                         min(values, na.rm = TRUE),
                         max(values, na.rm = TRUE))

    grid.text(range_text,
             x = 0.5, y = 0.47,
             gp = gpar(fontsize = 10))

    popViewport()
    time_text <- if(time_type == "hour") {
        "24-Hour Taxi Service Pattern"
    } else {
        "Monthly Taxi Service Pattern"
    }

    grid.text(time_text,
             x = 0.5, y = 0.95,
             gp = gpar(fontface = "bold", fontsize = 16))
}

ui <- fluidPage(
    titlePanel("Taxi Service Pattern Analysis"),

    sidebarLayout(
        sidebarPanel(
            selectInput("time_type", "Select Time Scale:",
                       choices = c(
                           "24-Hour View" = "hour",
                           "Monthly View" = "month"
                       )),

            selectInput("metric", "Select Metric to Display:",
                       choices = c(
                           "Average Fare" = "fare",
                           "Average Tips" = "tips",
                           "Average Distance" = "distance",
                           "Number of Trips" = "trips"
                       )),

            hr(),

            conditionalPanel(
                condition = "input.time_type == 'hour'",
                h4("24-Hour Time Periods"),
                div(style = "color: #2C3E50;", "Night (00:00-04:00 & 20:00-24:00)"),
                div(style = "color: #E67E22;", "Morning (04:00-08:00)"),
                div(style = "color: #3498DB;", "Day (08:00-16:00)"),
                div(style = "color: #9B59B6;", "Evening (16:00-20:00)")
            ),

            conditionalPanel(
                condition = "input.time_type == 'month'",
                h4("Seasonal Periods"),
                div(style = "color: #2C3E50;", "Winter (Dec-Feb)"),
                div(style = "color: #27AE60;", "Spring (Mar-May)"),
                div(style = "color: #E67E22;", "Summer (Jun-Aug)"),
                div(style = "color: #9B59B6;", "Fall (Sep-Nov)")
            )
        ),

        mainPanel(
            plotOutput("clockPlot", height = "800px")
        )
    )
)

server <- function(input, output, session) {
    filtered_stats <- reactive({
        calculate_stats(data, input$time_type)
    })

    output$clockPlot <- renderPlot({
        create_taxi_clock(
            filtered_stats(),
            input$metric,
            input$time_type
        )
    })
}

#shinyApp(ui = ui, server = server)

```

In our killer plot each part of the circle represents a different hour or month, depending on what the user specifies. The length and thickness of the bar at each position in the "clock" represents the metric being analyzed (fare, tips, trip miles, trip count). This allows to the user to visualize certain patterns on these metrics that are based on hour or month.
